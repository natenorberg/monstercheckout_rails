require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'Test User',
      email: 'test@example.com',
      password: 'password1',
      password_confirmation: 'password1',
      is_admin: false }
  }

  let(:invalid_attributes) {
    {name: '', email: ''}
  }

  let(:invalid_password_attributes) {
    { password: 'pass', password_confirmation: 'different' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    controller.stub(:user_signed_in).and_return(true)
    controller.stub(:user_is_admin).and_return(true)
    controller.stub(:current_user_or_admin).and_return(true)
  end


  def setup_email
    ENV['GMAIL_USERNAME'] = 'test@gmail.com'
    ENV['GMAIL_PASSWORD'] = 'fakepassword'
  end

  def unsetup_email
    ENV['GMAIL_USERNAME'] = nil
    ENV['GMAIL_PASSWORD'] = nil
  end

  before(:each) do
    @gmail_username = ENV['GMAIL_USERNAME']
    @gmail_password = ENV['GMAIL_PASSWORD']
  end

  after(:each) do
    ENV['GMAIL_USERNAME'] = @gmail_username
    ENV['GMAIL_PASSWORD'] = @gmail_password
  end

  describe 'GET index' do
    it 'assigns all users as @users' do
      user = User.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:users)).to eq([user])
    end
  end

  describe 'GET monitors' do
    it 'assigns all monitors as @users' do
      monitor = FactoryGirl.create(:monitor)
      get :monitors, {}, valid_session
      expect(assigns(:users)).to eq([monitor])
    end
  end

  describe 'GET admins' do
    it 'assigns all admins as @users' do
      admin = FactoryGirl.create(:admin)
      get :admins, {}, valid_session
      expect(assigns(:users)).to eq([admin])
    end
  end
  describe 'GET show' do
    it 'assigns the requested user as @user' do
      user = User.create! valid_attributes
      get :show, {:id => user.to_param}, valid_session
      expect(assigns(:user)).to eq(user)
    end
  end

  describe 'GET new' do
    it 'assigns a new user as @user' do
      get :new, {}, valid_session
      expect(assigns(:user)).to be_a_new(User)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested user as @user' do
      user = User.create! valid_attributes
      get :edit, {:id => user.to_param}, valid_session
      expect(assigns(:user)).to eq(user)
    end
  end

  describe 'GET password' do
    it 'assigns the requested user as @user' do
      user = User.create! valid_attributes
      get :password, {:id => user.to_param}, valid_session
      expect(assigns(:user)).to eq(user)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new User' do
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
      end

      it 'assigns a newly created user as @user' do
        post :create, {:user => valid_attributes}, valid_session
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it 'redirects to the created user' do
        post :create, {:user => valid_attributes}, valid_session
        expect(response).to redirect_to(User.last)
      end

      describe 'when email is setup' do
        before do
          setup_email
        end

        it 'sends an email' do
          expect {
            post :create, {:user => valid_attributes}, valid_session
          }.to change { ActionMailer::Base.deliveries.count }.by(1)
        end
      end

      describe 'when email is not setup' do
        before do
          unsetup_email
        end

        it 'does not send an email' do
          expect {
            post :create, {:user => valid_attributes}, valid_session
          }.to change { ActionMailer::Base.deliveries.count }.by(0)
        end
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved user as @user' do
        post :create, {:user => invalid_attributes}, valid_session
        expect(assigns(:user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        post :create, {:user => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:new_name) { 'Test Update' }
      let(:new_attributes) {
        { name: new_name,
          email: 'test@example.com',
          password: 'password1',
          password_confirmation: 'password1',
          is_admin: false }
      }

      it 'updates the requested user' do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => new_attributes}, valid_session
        user.reload
        expect(user.name).to eq(new_name)
      end

      it 'assigns the requested user as @user' do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        expect(assigns(:user)).to eq(user)
      end

      it 'redirects to the user' do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        expect(response).to redirect_to(user)
      end
    end

    describe 'with invalid params' do
      it 'assigns the user as @user' do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => invalid_attributes}, valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => invalid_attributes}, valid_session
        expect(response).to render_template('edit')
      end
    end

    describe 'with invalid password params' do
      it 'assigns the user as @user' do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => invalid_password_attributes}, valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => invalid_password_attributes}, valid_session
        expect(response).to render_template('password')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested user' do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}, valid_session
      }.to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}, valid_session
      expect(response).to redirect_to(users_url)
    end
  end

end
